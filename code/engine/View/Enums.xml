<?xml version="1.0" standalone="no" ?>
<enumgen version = "4">

    <namespace name = "BFG">

        <enum name = "ViewAction" export = "VIEW_API">
            <!-- For VIEW_API definition -->
            <include>View/Defs.h</include>

            <value set = "3000">A_FIRST_VIEWACTION</value>

					<!-- TODO: not used in View -->
					<value>VE_EFFECT</value>

					<!-- These are connected in View -->

					<!-- \condition None.
		           \consequence Creates a new RenderObject
		           \payload View::ObjectCreation -->
					<value>VE_CREATE_OBJECT</value>

					<!-- \condition None.
		           \consequence Destroys an existing RenderObject.
		           \payload GameHandle -->
					<value>VE_DESTROY_OBJECT</value>

					<!-- \condition Child object must exist.
		           \consequence Attaches a RenderObject to the destined RenderObject.
		           \payload GameHandle -->
					<value>VE_ATTACH_OBJECT</value>

					<!-- \condition None.
		           \consequence Detaches the destined RenderObject.
		           \payload Event::Void -->
					<value>VE_DETACH_OBJECT</value>

					<!-- \condition None.
		           \consequence Updates the position of an object.
		           \payload v3 -->
					<value>VE_UPDATE_POSITION</value>

					<!-- \condition None.
		           \consequence Updates the orientation of an object.
		           \payload qv4 -->
					<value>VE_UPDATE_ORIENTATION</value>

					<!-- \condition None.
		           \consequence Shows or hides an existing RenderObject.
		           \payload bool -->
					<value>VE_SET_VISIBLE</value>

					<!-- \condition None.
		           \consequence Creates a new Camera.
							              Deletes an allready existing one with the same handle.
		           \payload View::CameraCreation -->
					<value>VE_CREATE_CAMERA</value>

					<!-- \condition None.
		           \consequence Creates a new Light.
							              Deletes an allready existing one with the same handle.
		           \payload View::LightParameters -->
					<value>VE_CREATE_LIGHT</value>

					<!-- \condition None.
		           \consequence Sets the ambient light to a specific color.
		           \payload cv4 -->
					<value>VE_SET_AMBIENT</value>

					<!-- TODO SkyCreation is a struct with just a string member -->
					<!-- \condition None.
		           \consequence Deletes an existing SkyBox and Creates a new one.
		           \payload View::SkyCreation -->
					<value>VE_SET_SKY</value>

					<!-- \condition None.
		           \consequence Discontinues the View loop. Sends EA_FINISH.
		           \payload Event::Void -->
					<value>VE_SHUTDOWN</value>

					<!-- \condition None.
		           \consequence Creates or destroys the FPS display.
		           \payload bool -->
					<value>VE_DEBUG_FPS</value>
					
					<!-- \condition None.
		           \consequence Shows or hides the console.
		           \payload bool -->
					<value>VE_CONSOLE</value>
					
					<!-- \condition None.
		           \consequence Takes a screenshot of the scene and saves it as .jpg 
							              in the screenshot folder.
		           \payload Event::Void -->
					<value>VE_SCREENSHOT</value>
					
					<!-- \condition None.
		           \consequence Loads a requested Mesh. Sends VE_DELIVER_MESH.
		           \payload std::string -->
					<value>VE_REQUEST_MESH</value>

					<!-- These are emitted in View -->

					<!-- \condition On VE_REQUEST_MESH
		           \consequence 
		           \payload NamedMesh -->
					<value>VE_DELIVER_MESH</value>

					<!-- \condition On pressing Return in Console
		           \consequence
		           \payload std::string -->
					<value>VE_CONSOLE_COMMAND</value>

				</enum>

        <enum name = "EffectType" export = "VIEW_API">
            <!-- For VIEW_API definition -->
            <include>View/Defs.h</include>

            <value>ET_EXPLOSION</value>
            <value>ET_EXPLOSION2</value>
        </enum>

        <enum name = "LightType" export = "VIEW_API">
            <!-- For VIEW_API definition -->
            <include>View/Defs.h</include>

            <value set = "0">LT_Point</value>
            <value set = "1">LT_Directional</value>
            <value set = "2">LT_Spot</value>
        </enum>

    </namespace>

</enumgen>
