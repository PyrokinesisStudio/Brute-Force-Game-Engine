<?xml version="1.0" standalone="no" ?>
<enumgen version = "4">

    <namespace name = "BFG">

        <enum name = "PhysicsAction" export = "PHYSICS_API">

            <!-- For PHYSICS_API definition -->
            <include>Physics/Defs.h</include>

            <value set = "6000">A_FIRST_PHYSICSACTION</value>

  					<!-- ### PhysicsManager ### -->

					<!-- \condition None.
		           \consequence Deletes all physics objects.
		           \payload Event::Void -->
            <value>PE_CLEAR</value>

					<!-- \condition None
		           \consequence Creates an empty physicsObject. Sends PE_FULL_SYNC.
		           \payload Physics::ObjectCreationParams -->
		  			<value>PE_CREATE_OBJECT</value>

					<!-- \condition PhysicsObject must exist.
		           \consequence Deletes a particluar physics object.
		           \payload GameHandle -->
					  <value>PE_DELETE_OBJECT</value>

					<!-- \condition 1. PhysicsObject must exist.
					                2. View must be initalized (For mesh creation)
		           \consequence 1. Requests a mesh over VE_REQUEST_MESH from View if the mesh is not in the cache.
							              2. A PhysicsModule will be created and attatched to a PhysicsObject.
														3. Sends PE_FULL_SYNC.
		           \payload ModuleCreationParams -->
  					<value>PE_ATTACH_MODULE</value>

					<!-- Not implemented -->
					  <value>PE_REMOVE_MODULE</value>

  					<!-- \condition Parent and child object must exist.
	  	           \consequence 1. Attaches a physics object to another one.
								              2. Sends PE_TOTAL_MASS to parent.
		             \payload ObjectAttachmentParams -->
					  <value>PE_ATTACH_OBJECT</value>

   				<!-- \condition Parent and child object must exist.
  	           \consequence 1. Detaches a physics object to another one.
							              2. Sends PE_TOTAL_MASS to both objects.
	             \payload ObjectAttachmentParams -->
					<value>PE_DETACH_OBJECT</value>

					<!-- \condition A Collision of two physics objects must be occurred.
		           \consequence PE_CONTACT will be sent with address to root module.
		           \payload boost::tuple<GameHandle, GameHandle, f32>(ownModule, otherModule, penetrationDepth) -->
					<value>PE_CONTACT</value>

            <!-- ### PhysicsObject ### -->


					<!-- TODO: The name FULL_SYNC is misleading. It is more an initialize event. 
					     SYNC is suggesting that someting will be steady synchronized. Atm we connect the
							 activation of the gameobject with this event. -->
					<!-- \condition 1. Creation of an physics object or physics module.
		           \consequence Sends a lot of physics data (see payload) with adress to root module.
		           \payload Physics::FullSyncData -->
					<value>PE_FULL_SYNC</value>

            <!-- Delta Updates-->

					<!-- \condition None.
		           \consequence Update event will be sent with address to ownerHandle.
		           \payload Physics::VelocityComposite -->
					<value>PE_VELOCITY</value>

					<!-- \condition None.
		           \consequence Update event will be sent with address to ownerHandle.
		           \payload Physics::VelocityComposite -->
					<value>PE_ROTATION_VELOCITY</value>

					<!-- \condition None.
		           \consequence Update event will be sent with address to ownerHandle.
		           \payload v3 -->
					<value>PE_POSITION</value>

					<!-- Not used -->
					<value>PE_ORIENTATION</value>

					<!-- Not used -->
					<value>PE_MODULE_POSITION</value>
					
					<!-- Not used --> 
					<value>PE_MODULE_ORIENTATION</value>

					<!-- \condition None.
		           \consequence Update event will be sent with address to ownerHandle.
		           \payload f32 -->  
					<value>PE_TOTAL_MASS</value>

          <!-- Not used in engine. -->
					<!-- \condition None.
		           \consequence Update event will be sent with address to ownerHandle.
		           \payload m3x3 -->
          <value>PE_TOTAL_INERTIA</value>

          <!-- Control Updates-->
					<!-- \condition None.
		           \consequence Changes mass of a physics object.
		           \payload v3 -->
          <value>PE_MODULATE_MASS</value>

					<!-- \condition None.
		           \consequence Changes force of a physics object.
		           \payload v3 -->
            <value>PE_APPLY_FORCE</value>

					<!-- \condition None.
		           \consequence Changes torque of a physics object.
		           \payload v3 -->
            <value>PE_APPLY_TORQUE</value>

					<!-- \condition None.
		           \consequence Sets all velocities to zero.
		           \payload Event::Void() -->
					<value>PE_MAGIC_STOP</value>

					<!-- \condition None.
		           \consequence Perform some debug outputs of PhysicsObject.
		           \payload Event::Void() -->           
					<value>PE_DEBUG</value>

					<!-- \todo Naming of setter events is misleading. They should not be named 'UPDATE'_FOO_BAR. -->
					
					<!-- \condition None.
		           \consequence Setter for postion.
		           \payload v3 -->
					<value>PE_UPDATE_POSITION</value>

					<!-- \condition None.
		           \consequence Setter for orientation.
		           \payload qv4 -->
					<value>PE_UPDATE_ORIENTATION</value>

					<!-- Used in Gameobject but not implemented! -->
					<value>PE_UPDATE_MODULE_POSITION</value>
					
					<!-- Used in Gameobject but not implemented! -->
            <value>PE_UPDATE_MODULE_ORIENTATION</value>

            <!-- Note: One single v3 only (absolute) -->

					<!-- \condition None.
		           \consequence Setter for velocity.
		           \payload v3 -->
					<value>PE_UPDATE_VELOCITY</value>

					<!-- \condition None.
		           \consequence Setter for rotation velocity.
		           \payload v3 -->
					<value>PE_UPDATE_ROTATION_VELOCITY</value>

					<!-- \condition None.
		           \consequence Setter for collition mode.
		           \payload v3 -->
					<value>PE_UPDATE_COLLISION_MODE</value>
      
					<!-- Used in destroyable. But not implemented! -->
					<value>PE_UPDATE_SIMULATION_FLAG</value>
	    
	       <!-- Note: Has timestamps -->
					
					<!-- \condition None.
		           \consequence Used by network for interpolation.
		           \payload InterpolationDataV3 -->
					<value>PE_INTERPOLATE_POSITION</value>

					<!-- \condition None.
		           \consequence Used by network for interpolation.
		           \payload InterpolationDataQv4 -->
					<value>PE_INTERPOLATE_ORIENTATION</value>
        </enum>

        <enum name = "CollisionMode" export = "PHYSICS_API">
            <value>CM_Disabled</value>
            <value>CM_Standard</value>
            <value>CM_Ghost</value>
        </enum>

        <enum name = "CollisionGeometry" export = "PHYSICS_API">
            <value>CG_Sphere</value>
            <value>CG_Box</value>
            <value>CG_Plane</value>
            <value>CG_CappedCylinder</value>
            <value>CG_TriMesh</value>
        </enum>

    </namespace>

</enumgen>

